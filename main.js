import * as ConsoleImpl from './Simulator/Engine/ConsoleHelp.js';
import process, { argv } from 'process';
import readline from 'readline';
import { Simulator } from './Simulator/Simulator.js';
import fs from 'fs';
import { Task } from './Simulator/Scheduler/Scheduler.js';
import { MsgBoxHandler } from './Simulator/Engine/messageBox.js';
import SceneAlias from './Simulator/Scenes/Alias.js';

//Create the simulator instance and the console instance
const sim = new Simulator();
//Basic Console configs
const CH = new ConsoleImpl.BasicConsole();
CH.setTitle('Scheduler Simulator');
CH.show_cursor(false);
CH.clear_screen();
//Grab events from the console and set the console to raw mode
process.stdin.setRawMode(true);
const rl = readline.createInterface({
    input: process.stdin,
    escapeCodeTimeout: 1,
});
readline.emitKeypressEvents(process.stdin, rl);
// readline.emitKeypressEvents(process.stdin);

//start the simulator
sim.start();

//Load the system configuration from the file system
if (fs.existsSync('./systemconfig.json')) {
    const file = fs.readFile('./systemconfig.json', 'utf8', (err, data) => {
        if (err) {
            return;
        }
        //Parse the config saved
    });
}

const sysconfig = {
    Comment: "This file is generated by the Scheduler Simulator. Do not edit it manually.",
    Version: sim.Version,
    Date: new Date().toLocaleString("pt-BR"),
    Data: sim.systemConfig.map((item) => {
        return { name: item.name, value: item.value };
    })
};
fs.writeFileSync('./systemconfig.json', JSON.stringify(sysconfig, null, 2), 'utf8');
//Parse Args 
let silentStart = false;
if (argv.length > 2) {
    for (let i = 2; i < argv.length; i++) {
        if (argv[i] === "--help" || argv[i] === "-h") {
            console.log("Scheduler Simulator - Help");
            console.log("Usage: node main.js [options]");
            console.log("Options:");
            console.log("--help, -h: Show this help message and exit.");
            console.log("--config, -c: Show the current configuration.");
            console.log("--version, -v: Show the version of the simulator.");
            process.exit(0);
        }
        else if (argv[i] === "-f") {
            if (argv[i + 1]) {
                const fileName = argv[i + 1];
                if (!fileName.endsWith(".json")) {
                    MsgBoxHandler.getInstance().raise("File must be a .json", "Error loading tasks File", ["OK"]);
                }
                else if (!fs.existsSync(fileName)) {
                    MsgBoxHandler.getInstance().raise("File: " + fileName + " does not exist", "Error loading tasks File", ["OK"]);
                }
                else {
                    const file = fs.readFileSync(fileName, 'utf8', (err, data) => {
                        if (err) {
                            MsgBoxHandler.getInstance().raise("Error", err, ["OK"]);

                        }
                        if (data) {
                            const tasks = JSON.parse(data);
                            const validTasks = [];
                            if (tasks.length > 0) {
                                tasks.forEach((task) => {
                                    if (task.name && task.time && task.priority) {
                                        validTasks.push(new Task(task.burstTime, task.priority, task.deadline, task.pinToCore));
                                    }
                                    else {
                                        MsgBoxHandler.getInstance().raise("Error", "Invalid task format", ["OK"]);
                                    }
                                });
                            }
                        }
                    });
                }

                i++;
            }
        }
        else if (argv[i] === "--version" || argv[i] === "-v") {
            console.log("Scheduler Simulator Version: " + sim.Version);
            console.log("Engine Version: " + sim.Engine.Version);
            process.exit(0);
        }
        else if (argv[i] === "-s" || argv[i] === "-silent") {
            silentStart = true;
        }

    }

}
//Configure how to exit the simulator
sim.setupExit(
    () => {
        CH.show_cursor(true);
        console.clear();
        process.exit(0);
    }
)




//Configure events for the simulator
process.stdout.on('resize', () => {
    sim.resize();
});
process.stdin.on('keypress', (key, data) => {

    let input = "";

    if (typeof data.name === "undefined") {
        input = data.sequence;
    }
    else if (data.name === "up") input = "arrowup";
    else if (data.name === "down") input = "arrowdown";
    else if (data.name === "left") input = "arrowleft";
    else if (data.name === "right") input = "arrowright";
    else if (data.name === "space") input = "space";
    else if (data.name === "return") input = "enter";
    else if (data.name === "escape") input = "esc";
    else if (data.name === "backspace") input = "backspace";
    else input = data.name;
    if (data && data.ctrl && data.name === 'c') {
        console.clear();
        CH.write("\x1b[3J");
        CH.show_cursor(true);
        process.exit();

    }
    sim.handleInput(input, {
        ctrl: data.ctrl,
        shift: data.shift,
        alt: data.alt,
    });

});

//If silentStart is true, go to the simulation screen immediately
if (silentStart) {
    sim.Engine.goToScene(SceneAlias.simulationScreen);
}
